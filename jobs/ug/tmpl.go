// Code generated by go-bindata.
// sources:
// tmpl/index.tmpl
// DO NOT EDIT!

package ug

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x6e\xe4\xb8\x11\x3e\x5b\x4f\x51\xab\x81\xb3\xf6\xc0\x6a\xa9\xff\x66\x3c\x6a\x75\x63\xbc\xfe\xd9\x1c\x16\x99\x4d\xb0\x93\xcc\x22\x48\x16\x6c\xb1\x24\xd1\x4d\x91\x5a\x92\xea\x76\xdb\xf0\x21\x7b\xc9\x25\x97\x20\xb7\x20\x40\xb0\x6f\x90\x43\x16\x39\x25\xcf\xd0\x7e\xa3\x80\x94\xda\xdd\xde\x0c\x3c\x9e\x0c\x76\xe0\x8b\x9a\xf5\xb1\x58\xac\xaa\x8f\xc5\x22\x3a\xf9\xe4\xe4\xd5\xf1\x57\x5f\x7f\x79\x0a\x85\x29\xf9\xc4\x4b\xec\x0f\x70\x22\xf2\xb1\x8f\xc2\xb7\x00\x12\x3a\xf1\x00\x92\x12\x0d\x81\xb4\x20\x4a\xa3\x19\xfb\xaf\xbf\x3a\x0b\x0e\xfd\xcd\x84\x20\x25\x8e\xfd\x39\xc3\x45\x25\x95\xf1\x21\x95\xc2\xa0\x30\x63\x7f\xc1\xa8\x29\xc6\x14\xe7\x2c\xc5\xc0\x09\x07\xc0\x04\x33\x8c\xf0\x40\xa7\x84\xe3\xb8\xdb\x89\xb6\x0c\x15\xc6\x54\x01\x7e\x5b\xb3\xf9\xd8\x7f\x13\xbc\x3e\x0a\x8e\x65\x59\x11\xc3\xa6\x1c\xb7\xac\x32\x1c\x23\xcd\xb1\x59\x67\x98\xe1\x38\x59\xfd\x65\xf5\xef\xd5\x0f\xab\x7f\xad\xfe\xb9\xfa\xcf\xcd\x1f\x56\x3f\xdc\x7c\x77\xf3\xa7\x24\x6c\xe6\xbc\x84\x33\x31\x03\x85\x7c\xec\x6b\xb3\xe4\xa8\x0b\x44\xe3\x43\xa1\x30\x6b\x91\x4e\xaa\xb5\x8d\xd7\x09\x13\x6f\x2a\xe9\x12\xae\x3c\x80\xf0\xe9\x94\xa4\xb3\x5c\xc9\x5a\xd0\x18\x38\x13\x48\x54\x90\x2b\x42\x19\x0a\xb3\x67\x24\x28\x96\x17\xe6\x00\x9e\x44\xd1\x69\xff\xc5\x99\x1b\x1c\x0f\x4e\xbb\xfb\xa3\xa7\xa1\x07\x90\x4a\x2e\x55\x0c\x4f\xa2\x67\x2f\x46\x9e\xb7\x05\x64\x59\x36\xf2\xee\x33\xfd\x22\xa2\x98\x1f\xc0\x93\x5e\xff\xe8\xd9\xc9\xd0\x0d\x4e\x86\x47\x9f\xed\x6f\xaf\x0a\x34\xbb\xc4\x18\x06\x51\xb4\xeb\x3e\x23\x2f\x58\xe0\x74\xc6\x4c\x40\x04\x2b\x89\x61\x52\xc4\xf0\x79\x6b\x11\xba\xfd\xa1\x06\x24\x1a\x81\x89\xcc\x72\x80\x23\x2f\x28\xe5\xe5\x83\x95\x1f\xaa\x77\xed\x75\xa6\xb5\x31\x52\x04\x5a\xa6\x2c\x95\x02\x7e\x9b\x72\xa2\xf5\xef\xc7\x7e\x0b\x04\xfe\xef\x0e\xe0\xed\x4a\x4f\xc7\x3e\x6c\xb4\xe0\xca\xdb\x99\xa3\x32\x2c\x25\x3c\x20\x9c\xe5\x22\x86\x92\x51\xca\x71\xe4\xed\x94\x44\xe5\x4c\x04\x8e\x81\x18\xa2\x4e\x1f\x4b\xbb\xb9\xe7\xbd\x5c\xa7\x61\x86\xcb\x4c\x91\x12\xf5\xc6\xe1\x2b\x6f\x27\xda\xb5\xdf\x9d\xad\x3c\x56\x52\xb3\x26\xb0\x68\x17\x86\xd1\xae\xb7\x73\xed\xed\x0c\xef\xd3\xeb\x46\x5b\x9a\x4e\x78\x80\xc9\x6b\xeb\x9a\xcd\xf8\x23\xf4\xeb\xf1\xb9\xd4\xd6\x60\xc3\x72\x0c\xd1\xc8\xcb\xa4\x30\xed\x99\xef\xb5\x5c\x77\xb2\xa9\xbc\x70\x95\x4a\x99\xae\x38\x59\xc6\x90\x71\xbc\x18\x79\xe0\x7e\x03\xca\x14\xa6\x8d\x71\x25\x17\x16\x06\x38\xaf\xb5\x61\xd9\x32\x68\xaf\x93\x18\x52\x14\x06\x55\x33\x59\x11\x4a\x99\xc8\x63\xe8\x45\xd5\x45\x03\x39\x43\x0b\x45\xaa\x18\xec\xb7\xd9\xf7\xc1\xdb\xa6\x92\xd7\xa5\x18\x79\x0e\xcf\x95\x5c\xc4\xdd\xc6\x02\x33\x58\x3a\x13\x76\x26\x06\x52\x1b\x69\xd7\x6f\x5f\x0a\x2a\x9f\x92\xbd\x5e\xff\xf0\x00\x36\x9f\xa8\x33\x18\xee\x5b\xc5\x5b\x4f\x07\x51\x75\x61\xb3\xdc\xf8\xbb\xce\x57\xb7\x95\x0d\x5e\x98\x75\xe9\x6c\x02\x9d\x4a\x45\x51\x05\x96\xea\x5a\xc7\xd0\xb7\xba\xd7\x5e\xd1\x03\xe7\xd1\xdb\xd6\x5c\x7b\x1e\xd9\x4c\x52\x4c\xa5\x6a\x2f\x03\x21\x05\x8e\x7e\x7c\xd9\xd9\x3a\x9c\x33\x8a\xd2\xad\x01\xd8\x90\x9c\xb1\x0b\xa4\x4d\x66\x8d\xac\x62\xcb\x78\x23\x71\xcc\xcc\x96\x58\x32\xd1\x74\x8c\xe6\x08\x6d\xc0\x02\x9b\x8a\xdf\xa0\xad\xda\x3a\x85\x00\x6b\x95\x0d\x72\x19\x30\x41\x6d\x9e\x83\x6e\x14\xb5\xbb\x2b\x22\x74\x26\x55\x19\x37\x43\x4e\x0c\xbe\xd9\x0b\x86\xd1\xee\xfe\x06\xf8\xba\x01\x46\xde\x1d\x62\x6a\xc5\xf7\x3e\x0d\x43\x8a\xa5\xd4\xa6\x40\x81\xba\xc3\x44\x26\x43\xa2\x35\x1a\x1d\xb2\x92\xe4\xa8\xc3\x4a\x72\x26\x48\xe7\xbc\xca\x3f\xdd\x07\x21\x03\x85\x15\x12\x73\x97\xe4\xf6\x3c\xa7\x72\xde\x10\xe3\x36\x5e\x57\x8e\x06\x59\x91\x94\x99\xa5\xcd\x67\x12\xb6\xcd\x29\x09\x9b\xae\x9c\xd8\x0a\x71\x2d\xb0\x49\x34\xa3\x63\x7f\x9a\xcf\x19\xf5\xc1\x1e\x49\xcd\x84\x6d\x2a\x2e\x07\x56\x86\xb2\x36\x48\x81\x4b\x59\x4d\x5c\xfc\xc9\x27\x41\x00\xbf\x39\x3e\xfa\x1c\x72\x14\xa8\x08\x07\x92\xa6\xa8\x35\x9b\x32\xce\xcc\x12\x14\xa6\xb2\x2c\x51\x50\xc7\x33\x30\x0d\xa6\x20\x06\x4a\xa4\x8c\x80\xae\xd3\x02\x88\xde\x8a\x04\x1a\x2f\xdc\x56\xa6\x50\xb2\xce\x0b\x90\x82\x2f\x41\x8a\x14\x3b\xf0\x85\x94\x15\x98\x5a\x09\xa4\x20\x05\x64\x52\x81\x29\x10\xaa\x5a\x55\x52\xa3\x06\x99\x01\xe3\xbc\xd6\xa6\x39\x56\x23\x60\x19\x28\x2c\xe5\x1c\xe9\x81\xd3\x44\x41\xad\x92\x1d\x36\x3b\x2d\x18\xe7\x90\x11\x6a\x7b\x8f\x83\x35\x29\x11\x16\x64\x09\xa9\x42\x62\x63\x9d\x2e\xa1\x52\x36\x22\x91\x3b\x05\xff\x4b\x52\x6b\xf4\xa1\xe9\x3c\x00\x41\xe0\xd2\xa7\x65\xad\x52\x04\xad\xd2\xb1\x9f\x16\xa8\x44\xa7\xac\x06\x3e\x98\x65\xe5\x1e\x35\x14\x65\x68\x01\xa7\x1b\x3a\x79\x62\x7b\x79\x42\xd9\x1c\x5c\xd3\x1a\xfb\xf6\x1a\xf2\xdb\xb4\x6e\xc1\x1b\x14\x20\x29\x7a\x93\xd5\xf7\xab\xbf\xaf\xfe\x9c\x84\x45\xef\x16\xdd\xd2\x76\x37\xc2\xdd\xae\x78\xbb\xda\xba\x59\x11\xb1\x56\x5d\xb7\xc8\xf9\x4c\x0a\x43\x66\x06\xfd\x49\x12\x5a\x85\xc9\xcf\xc4\x54\x57\xa3\xab\x2b\x70\xe7\x1d\x3a\x5a\xa6\x1a\x7a\xd7\xd7\x1b\x3b\x94\xcd\x27\x09\x69\x5f\x3f\xf6\xc1\xa5\xe3\x30\x9c\xcf\x3a\xa9\x2c\xc3\x65\xbd\x34\x42\xe2\x37\xb9\xc0\x4b\xca\x74\x31\x93\xfe\xe4\xe5\xff\x82\x49\x48\x26\x49\x68\x0d\xad\xc3\xb8\x23\x7c\x58\x4c\x06\x39\xe6\x8a\x94\xf7\x87\x34\x7c\x67\x48\xa6\x53\x62\x58\xe7\x85\x2c\xd1\x9f\xbc\x6c\x06\x3f\xa9\xe3\x4c\x68\x43\xde\xed\x79\xf4\x4e\xcf\x17\x8b\x45\xe7\xd6\x98\xe3\x65\x9b\x01\x4b\xc9\x1d\xf9\x11\xb0\x31\x78\x18\x1b\xe7\x92\x89\xb4\x20\x26\xfc\xac\x38\x3c\x3c\x3a\xfd\xf9\xf3\xa3\x2f\x7e\x95\xfe\xa2\x77\x36\x18\xfe\xfa\xbc\x5b\x1c\xf9\x93\x9b\x3f\xae\xfe\x71\xf3\xdd\x7d\x01\x6d\x0f\xef\xab\xb4\xbf\xad\xbe\x5f\xfd\xf5\xe3\x57\x5a\xff\xff\xaf\xb4\x6f\x4a\x3d\x7b\x6b\xb5\xd9\x89\x47\xc0\xf1\xb3\x87\x56\xdc\xf6\xdd\x51\x7f\xa4\x4b\xe3\x81\xb5\xd7\xfd\xd0\xda\xb3\x5c\x84\x3f\x2e\x40\x07\x3e\x02\x86\x9e\xbf\x67\x15\x1e\xe3\xb7\x83\xc3\xd7\xaf\x5e\x69\x7d\x76\xd2\x3f\x14\x5c\xf0\xe7\xe6\xcd\x2f\xe1\xbd\xca\xb0\x1d\x78\x49\xd8\x3c\x47\x92\xb0\xf9\x2f\xe1\xbf\x01\x00\x00\xff\xff\x67\xea\x81\x03\x5c\x10\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 4188, mode: os.FileMode(436), modTime: time.Unix(1503103270, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

